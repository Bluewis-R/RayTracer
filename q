[1mdiff --git a/src/RayTracer/Camera.cpp b/src/RayTracer/Camera.cpp[m
[1mindex 73e9539..229130f 100644[m
[1m--- a/src/RayTracer/Camera.cpp[m
[1m+++ b/src/RayTracer/Camera.cpp[m
[36m@@ -15,23 +15,25 @@[m [mCamera::Camera(glm::ivec2 _windowSize)[m
                         [m
   (*m_inverseProjectionMatrix) = projectionMatrix;[m
   //  View Matrix[m
[31m-  m_viewMatrix = std::make_shared<glm::mat4>();[m
[31m-[m
[32m+[m[32m  m_inverseViewMatrix = std::make_shared<glm::mat4>();[m
[32m+[m[32m  //TODO:  look up how to do forward vector[m
[32m+[m[32m  glm::mat4 viewMatrix = glm::lookAt(m_position, glm::vec3(0.0f, 0.0f, glm::radians(90.0f)), glm::vec3(0.0f, glm::radians(90.0f), 0.0f)); //(pos,forward vec of cam, up vec)[m
[32m+[m[32m  (*m_inverseViewMatrix) = viewMatrix;[m
 }[m
 [m
[31m-shared<Ray> Camera::Fucntion1(glm::ivec2 _pixleCoord)[m
[32m+[m[32mshared<Ray> Camera::CreateRay(glm::ivec2 _pixleCoord)[m
 {[m
   shared<Ray> rtn = std::make_shared<Ray>(); //Ray(origin, direction)[m
   //  Normalised device coordinate [m
   rtn->SetOrigin(glm::vec3(_pixleCoord.x/m_windowSize.x, _pixleCoord.y / m_windowSize.y, -1));[m
   rtn->SetDirection(glm::vec3(0.0f, 0.0f, 1.0f));[m
   [m
[32m+[m[32m  //  To convert from device space to worldspace[m
   rtn = (*rtn)* m_inverseProjectionMatrix;[m
[31m-    [m
[31m-    [m
[31m-[m
[32m+[m[32m  // To convert from left hand to righthand TODO: aske leigh[m
 [m
[32m+[m[32m  //  To covert from worldspace to viewspace[m
[32m+[m[32m  rtn = (*rtn)* m_inverseViewMatrix;[m
 [m
[31m-  //std::shared_ptr<Ray> rtn = std::make_shared<Ray>(glm::vec3(1.0, 1.0, 1.0), glm::vec3(2.0, 2.0, 2.0));[m
   return rtn;[m
 }[m
[1mdiff --git a/src/RayTracer/Camera.h b/src/RayTracer/Camera.h[m
[1mindex 5d81029..76791fe 100644[m
[1m--- a/src/RayTracer/Camera.h[m
[1m+++ b/src/RayTracer/Camera.h[m
[36m@@ -11,15 +11,16 @@[m [mclass Camera[m
 public:[m
   Camera(glm::ivec2 _windowSize);[m
 [m
[31m- shared<Ray> Fucntion1(glm::ivec2 _pixleCoord); [m
[32m+[m[32m shared<Ray> CreateRay(glm::ivec2 _pixleCoord);[m
  [m
 [m
 private:[m
   glm::ivec2 m_windowSize;[m
 [m
[31m-  shared<glm::mat4> m_viewMatrix;[m
[32m+[m[32m  shared<glm::mat4> m_inverseViewMatrix;[m
   shared<glm::mat4> m_inverseProjectionMatrix;[m
[31m-  shared<glm::vec3> m_position;[m
[32m+[m[32m  glm::vec3 m_position = glm::vec3(0.0f, 0.0f, 0.0f);[m
[32m+[m[32m  glm::vec3 m_rotation = glm::vec3(0.0f, 0.0f, 0.0f);[m
   [m
 }; [m
 [m
[1mdiff --git a/src/RayTracer/RayTracer.h b/src/RayTracer/RayTracer.h[m
[1mindex 1608c0e..bc3e227 100644[m
[1m--- a/src/RayTracer/RayTracer.h[m
[1m+++ b/src/RayTracer/RayTracer.h[m
[36m@@ -1,8 +1,13 @@[m
 #pragma once[m
 #ifndef _RAYTRACER_H_[m
 #define _RAYTRACER_H_[m
[32m+[m
[32m+[m
 #include "RayTracer/Camera.h"[m
 [m
[32m+[m[32m#include "Macros.h"[m
[32m+[m[32m#include "Tracer.h"[m
[32m+[m
 [m
 [m
 #endif // !_RAYTRACER_H_[m
\ No newline at end of file[m
[1mdiff --git a/src/RayTracer/Tracer.cpp b/src/RayTracer/Tracer.cpp[m
[1mindex 4fb440a..1d670ed 100644[m
[1m--- a/src/RayTracer/Tracer.cpp[m
[1m+++ b/src/RayTracer/Tracer.cpp[m
[36m@@ -1,9 +1,10 @@[m
 #include "Tracer.h"[m
 #include "LewisMaths.h"[m
 [m
[31m-shared<glm::vec3> Tracer::TraceRay(Ray _ray)[m
[32m+[m[32mglm::vec3 Tracer::TraceRay(shared<Ray> _ray)[m
 {[m
[31m-  return shared<glm::vec3>();[m
[32m+[m[32m  //returns colour[m
[32m+[m[32m  return glm::vec3(1.0f,0.0f,0.0f);[m
 }[m
 [m
 glm::vec3 Tracer::ClosetPoint(shared<Ray> _ray, glm::vec3 _point)[m
[1mdiff --git a/src/RayTracer/Tracer.h b/src/RayTracer/Tracer.h[m
[1mindex 07212d8..e628fec 100644[m
[1m--- a/src/RayTracer/Tracer.h[m
[1m+++ b/src/RayTracer/Tracer.h[m
[36m@@ -23,7 +23,7 @@[m [mstruct RayIData[m
 class Tracer[m
 {[m
 public:[m
[31m-  shared<glm::vec3> TraceRay(Ray _ray);[m
[32m+[m[32m  glm::vec3 TraceRay(shared<Ray> _ray);[m
 [m
   glm::vec3 ClosetPoint(shared<Ray> _ray, glm::vec3 _point);[m
   shared<RayIData> RaySphereIntersection(shared<Ray > _ray, shared<Sphere> _sphere);[m
[1mdiff --git a/src/game/main.cpp b/src/game/main.cpp[m
[1mindex f7930b9..667ac28 100644[m
[1m--- a/src/game/main.cpp[m
[1m+++ b/src/game/main.cpp[m
[36m@@ -3,7 +3,6 @@[m
 #include <SDL2/SDL.h>[m
 #include <gl/glew.h>[m
 #include <RayTracer/MCG_GFX_Lib.h>[m
[31m-[m
 #include "RayTracer/RayTracer.h"[m
 [m
 #define WINDOW_WIDTH 800[m
[36m@@ -18,25 +17,35 @@[m [mint main(int argc, char *argv[])[m
   //rendering pixel[m
   MCG::Init(glm::ivec2(WINDOW_WIDTH, WINDOW_HEIGHT));[m
   MCG::SetBackground(black);[m
[32m+[m
[32m+[m
[32m+[m[32m  std::shared_ptr<Camera> cam = makeSh<Camera>(glm::ivec2(WINDOW_WIDTH, WINDOW_HEIGHT));[m
[32m+[m[32m  shared<Tracer> RayTracer = makeSh<Tracer>();[m
[32m+[m
[32m+[m
[32m+[m[32m  std::vector<shared<std::vector<shared<Ray>>>> rays;[m
  [m
[32m+[m[32m  std::vector<shared<Ray>> temp_rays;[m
[32m+[m[41m  [m
[32m+[m
   for (int i = 0; i < WINDOW_WIDTH; i++)[m
[31m-  {[m
[32m+[m[32m  {[m[41m [m
[32m+[m[32m    shared<std::vector<shared<Ray>>> tempVec;[m
     for (int j = 0; j < WINDOW_HEIGHT; j++)[m
     {[m
[31m-      glm::ivec2 rayPosition = glm::ivec2(i, j);[m
[32m+[m[32m      shared<Ray> tmpRay = cam->CreateRay(glm::ivec2(i, j));[m
[32m+[m[32m      tempVec->push_back(tmpRay);[m
[32m+[m[32m      MCG::DrawPixel(glm::ivec2(i, j), RayTracer->TraceRay(tmpRay));[m
[32m+[m[32m      //  Smalle[m
[32m+[m
     }[m
[32m+[m[32m    rays.push_back(tempVec);[m
[32m+[m
[32m+[m
   }[m
   [m
 [m
[31m-  [m
[31m-  [m
[31m-  [m
[31m-  glm::ivec2 pix1(1, 1);[m
[31m-  glm::ivec2 pix2(2, 2);[m
 [m
[31m-  std::shared_ptr<Camera> cam = std::make_shared<Camera>(glm::ivec2(WINDOW_WIDTH, WINDOW_HEIGHT));[m
[31m-  //cam->Fucntion1(pix1, pix2);[m
[31m-  //cam->Fucntion1(pix1, pix2);[m
 [m
 [m
 [m
